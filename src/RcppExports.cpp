// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dp_normal_mix
Rcpp::List dp_normal_mix(const arma::mat& x, const int N, const double alpha, const arma::vec& lambda, const double kappa, const double nu, const arma::mat& Omega, const int epochs);
RcppExport SEXP _pldensity_dp_normal_mix(SEXP xSEXP, SEXP NSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP nuSEXP, SEXP OmegaSEXP, SEXP epochsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const int >::type epochs(epochsSEXP);
    rcpp_result_gen = Rcpp::wrap(dp_normal_mix(x, N, alpha, lambda, kappa, nu, Omega, epochs));
    return rcpp_result_gen;
END_RCPP
}
// dp_normal_deval
arma::vec dp_normal_deval(const Rcpp::List& model, const arma::mat& xnew, const int nparticles);
RcppExport SEXP _pldensity_dp_normal_deval(SEXP modelSEXP, SEXP xnewSEXP, SEXP nparticlesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xnew(xnewSEXP);
    Rcpp::traits::input_parameter< const int >::type nparticles(nparticlesSEXP);
    rcpp_result_gen = Rcpp::wrap(dp_normal_deval(model, xnew, nparticles));
    return rcpp_result_gen;
END_RCPP
}
// dp_normal_marginal
Rcpp::List dp_normal_marginal(const Rcpp::List& model, const arma::uvec& dims);
RcppExport SEXP _pldensity_dp_normal_marginal(SEXP modelSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(dp_normal_marginal(model, dims));
    return rcpp_result_gen;
END_RCPP
}
// dp_normal_deval_conditional
arma::mat dp_normal_deval_conditional(const Rcpp::List& model, const arma::mat& xnew, const arma::uvec& eval_dims, const arma::uvec& condition_dims, const arma::mat& condition_values, const int nparticles);
RcppExport SEXP _pldensity_dp_normal_deval_conditional(SEXP modelSEXP, SEXP xnewSEXP, SEXP eval_dimsSEXP, SEXP condition_dimsSEXP, SEXP condition_valuesSEXP, SEXP nparticlesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xnew(xnewSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type eval_dims(eval_dimsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type condition_dims(condition_dimsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type condition_values(condition_valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type nparticles(nparticlesSEXP);
    rcpp_result_gen = Rcpp::wrap(dp_normal_deval_conditional(model, xnew, eval_dims, condition_dims, condition_values, nparticles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pldensity_dp_normal_mix", (DL_FUNC) &_pldensity_dp_normal_mix, 8},
    {"_pldensity_dp_normal_deval", (DL_FUNC) &_pldensity_dp_normal_deval, 3},
    {"_pldensity_dp_normal_marginal", (DL_FUNC) &_pldensity_dp_normal_marginal, 2},
    {"_pldensity_dp_normal_deval_conditional", (DL_FUNC) &_pldensity_dp_normal_deval_conditional, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_pldensity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
